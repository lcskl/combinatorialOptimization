
blossom5-v2.05.src:
  The version of the blossom library you should use.
  Note the licence does not allow you to use it for commercial applications!
  If you want to use a different matching library, please ask me first.
  NOTE: blossomV will SEGFAULT if no perfect matching exists (at least I was told so)!

instances, generate_random_Kn.tcl generate_instances.sh:
  The instances folder (which I will upload separately) contains some instances generated by these two scripts.
  If you want to generate more/new instances, you may need to install tcl.
  I will generate new instances for testing, so don't overtune to these instances!

src:
  Currently contains example code for finding a minimum weight perfect matching.

.compile.sh, clean.sh:
  simple bash scripts for compiling and cleaning.
Call ./compile.sh debug or ./compile.sh opt to build with or without debugging symbols, respectively.


RUN: 
     ./bin/minimum-mean-cycle <dimacs-file>
  Example:
     ./bin/minimum-mean-cycle ./instances/K1024.dimacs  

Files:
    utils.hpp / utils.cpp:
        Functions that do not directly relate to either the T-join or the Minimum Mean Weight Cycle algo

        - dfs: given a visited array, it stamps every reachable vertex with a given value using a depth first search
        - copy_abs_weight: copies a graph taking the absolute values of the edge weights
        - dijkstra: simple implementation of Dijkstra's Algorithm (with Priority Queues and, therefore, lazy deletions)

    join.hpp / join.cpp:
        Methods for calculating the minimum weight empty join

        - minimum_weight_empty_join: implementing the minimum weight T-join for T = empty
        - connected_components: Given a subset of vertices T, it returns a list of 'Graph' objects with the connected components of G(T) (graph spanned by those vertices). 
        - perfect_matching: wrapper to the perfect matching solver in blossom5-v2.05.src 

    graph.hpp / graph.cpp 
        Mods:

        Added:
        - odd_v_minus: returns list of vertices with odd degree w.r.t negative edges.

* Complete T-Join (Empty Join Algorithm) (Lucas): 
  - Metric Closure (Lucas)
  - Backtrack to get the actual min x-y-paths (Lucas)
  - Symmetric Differences (x-y-paths and J with E-) (Lucas)
* Mean Weight Cycle Algorithm (check last iteration, double for edge weights) (Noah):
  - Check for cycles (remember dfs with last visited vertex check)
  - Multiple edges (maybe disregard all but the edge with smallest weight)
* Brute-force checker for input instances (Noah)